<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myinfo.base.mapper.ProBookBorrowMapper">
  <resultMap id="BaseResultMap" type="com.myinfo.base.entity.ProBookBorrow">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="book_id" jdbcType="VARCHAR" property="bookId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="return_time" jdbcType="TIMESTAMP" property="returnTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, book_id, user_id, user_name, create_time, return_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pro_book_borrow
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from pro_book_borrow
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.myinfo.base.entity.ProBookBorrow">
    insert into pro_book_borrow (id, book_id,
      user_id, user_name, create_time, 
      return_time)
    values (#{id,jdbcType=VARCHAR}, #{bookId,jdbcType=VARCHAR},
      #{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{returnTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.myinfo.base.entity.ProBookBorrow">
    insert into pro_book_borrow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="returnTime != null">
        return_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="returnTime != null">
        #{returnTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myinfo.base.entity.ProBookBorrow">
    update pro_book_borrow
    <set>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="returnTime != null">
        return_time = #{returnTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myinfo.base.entity.ProBookBorrow">
    update pro_book_borrow
    set book_id = #{bookId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      return_time = #{returnTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <!-- 随机获取一条未归还的借阅信息 -->
  <select id="findRandom" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List" />
    from
     (
      select
        *,
        rand() as r
      from
        pro_book_borrow bo
      where
        user_id = #{userId}
        and return_time is null
        and exists ( select * from pro_book b where b.id = bo.book_id and b.borrow_status = 1 )
      order by r
      limit 1
    ) t
  </select>
</mapper>