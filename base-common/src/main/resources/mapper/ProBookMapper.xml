<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myinfo.base.mapper.ProBookMapper">
  <resultMap id="BaseResultMap" type="com.myinfo.base.entity.ProBook">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="VARCHAR" property="createUserId" />
    <result column="create_user_name" jdbcType="VARCHAR" property="createUserName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="borrow_status" jdbcType="INTEGER" property="borrowStatus" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_time, create_user_id, create_user_name, name, borrow_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pro_book
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from pro_book
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.myinfo.base.entity.ProBook">
    insert into pro_book (id, create_time, create_user_id, 
      create_user_name, name, borrow_status
      )
    values (#{id,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=VARCHAR}, 
      #{createUserName,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{borrowStatus,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myinfo.base.entity.ProBook">
    insert into pro_book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="createUserName != null">
        create_user_name,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="borrowStatus != null">
        borrow_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=VARCHAR},
      </if>
      <if test="createUserName != null">
        #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="borrowStatus != null">
        #{borrowStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myinfo.base.entity.ProBook">
    update pro_book
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=VARCHAR},
      </if>
      <if test="createUserName != null">
        create_user_name = #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="borrowStatus != null">
        borrow_status = #{borrowStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myinfo.base.entity.ProBook">
    update pro_book
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=VARCHAR},
      create_user_name = #{createUserName,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      borrow_status = #{borrowStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <!-- 随机获取N本书 -->
  <select id="findRandomByNumber" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List" />
    from
        (select *,rand() as r from pro_book where borrow_status = 0 order by r limit ${num}) t
  </select>
</mapper>